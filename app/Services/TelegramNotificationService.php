<?php

namespace App\Services;

use App\Models\Ticket;
use App\Models\User;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class TelegramNotificationService
{
    private string $baseUrl;
    private string $botToken;
    private string $chatId;

    public function __construct()
    {
        $this->botToken = config('services.telegram.bot_token');
        $this->chatId = config('services.telegram.chat_id');
        $this->baseUrl = "https://api.telegram.org/bot{$this->botToken}";
    }

    public function sendMessage(string $message): bool
    {
        try {
            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            Log::info('Sending Telegram message:', ['message' => $message]);

            $response = Http::get("{$this->baseUrl}/sendMessage", [
                'chat_id' => $this->chatId,
                'text' => $message,
                'parse_mode' => 'HTML',
                'disable_web_page_preview' => true
            ]);

            // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            Log::info('Telegram API response:', [
                'status' => $response->status(),
                'body' => $response->json()
            ]);

            if (!$response->successful()) {
                Log::error('Telegram API Error', [
                    'status' => $response->status(),
                    'body' => $response->body()
                ]);
                return false;
            }

            return true;
        } catch (\Exception $e) {
            Log::error('Telegram Notification Error', [
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return false;
        }
    }

    private function escapeHtml(?string $text): string
    {
        if ($text === null) {
            return '';
        }
        return htmlspecialchars($text, ENT_QUOTES | ENT_HTML5);
    }

    public function formatTicketMessage(string $action, Ticket $ticket, ?User $initiator = null): string
    {
        $baseUrl = config('app.url');
        $ticketUrl = "{$baseUrl}/cabinet/tickets/{$ticket->id}";

        return match ($action) {
            'created' => $this->formatCreatedTicketMessage($ticket, $ticketUrl),
//            'updated' => $this->formatUpdatedTicketMessage($ticket, $initiator, $ticketUrl),
//            'status_changed' => $this->formatStatusChangedMessage($ticket, $initiator, $ticketUrl),
//            'commented' => $this->formatCommentedMessage($ticket, $initiator, $ticketUrl),
//            'assigned' => $this->formatAssignedMessage($ticket, $initiator, $ticketUrl),
//            'closed' => $this->formatClosedMessage($ticket, $initiator, $ticketUrl),
//            default => $this->formatDefaultMessage($ticket, $action, $ticketUrl),
        };
    }

    private function formatCreatedTicketMessage(Ticket $ticket, string $ticketUrl): string
    {
        $text = htmlspecialchars($ticket->text ?? '', ENT_QUOTES | ENT_HTML5);
        $creatorName = htmlspecialchars($ticket->creator?->name ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', ENT_QUOTES | ENT_HTML5);
        $performerName = htmlspecialchars($ticket->performer?->name ?? 'ü§∑‚Äç', ENT_QUOTES | ENT_HTML5);

        return "üîî <b>–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{$ticket->id}</b>\n\n" .
            "–∞–≤—Ç–æ—Ä: <b>{$creatorName}</b>\n" .
            "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: <b>{$performerName}</b>\n\n" .
            ($text ? "\"{$text}\"\n\n" : "\n") .
            "üëâ <a href='$ticketUrl'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–∏–∫–µ—Ç—É</a>\n";
    }

//    private function formatUpdatedTicketMessage(Ticket $ticket, ?User $initiator, string $ticketUrl): string
//    {
//        $title = $this->escapeHtml($ticket->title);
//        $text = $this->escapeHtml($ticket->text);
//        $initiatorName = $this->escapeHtml($initiator?->name ?? '–°–∏—Å—Ç–µ–º–∞');
//
//        return "üìù <b>–¢–∏–∫–µ—Ç #{$ticket->id} –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n" .
//            "–û–±–Ω–æ–≤–∏–ª: {$initiatorName}\n" .
//            "–ó–∞–≥–æ–ª–æ–≤–æ–∫: {$title}\n" .
//            ($text ? "–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: \"{$text}\"\n\n" : "\n") .
//            "<a href=\"{$ticketUrl}\">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</a>";
//    }
//
//    private function formatStatusChangedMessage(Ticket $ticket, ?User $initiator, string $ticketUrl): string
//    {
//        $title = $this->escapeHtml($ticket->title);
//        $status = $this->escapeHtml($ticket->status ?? '–ù–µ —É–∫–∞–∑–∞–Ω');
//        $initiatorName = $this->escapeHtml($initiator?->name ?? '–°–∏—Å—Ç–µ–º–∞');
//
//        return "üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞ #{$ticket->id}</b>\n\n" .
//            "–ò–∑–º–µ–Ω–∏–ª: {$initiatorName}\n" .
//            "–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {$status}\n" .
//            "–ó–∞–≥–æ–ª–æ–≤–æ–∫: {$title}\n\n" .
//            "<a href=\"{$ticketUrl}\">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>";
//    }
//
//    private function formatCommentedMessage(Ticket $ticket, ?User $initiator, string $ticketUrl): string
//    {
//        $title = $this->escapeHtml($ticket->title);
//        $initiatorName = $this->escapeHtml($initiator?->name ?? '–°–∏—Å—Ç–µ–º–∞');
//
//        return "üí¨ <b>–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç–∏–∫–µ—Ç—É #{$ticket->id}</b>\n\n" .
//            "–ê–≤—Ç–æ—Ä: {$initiatorName}\n" .
//            "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∏–∫–µ—Ç–∞: {$title}\n\n" .
//            "<a href=\"{$ticketUrl}\">–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</a>";
//    }
//
//    private function formatAssignedMessage(Ticket $ticket, ?User $initiator, string $ticketUrl): string
//    {
//        $title = $this->escapeHtml($ticket->title);
//        $initiatorName = $this->escapeHtml($initiator?->name ?? '–°–∏—Å—Ç–µ–º–∞');
//        $assigneeName = $this->escapeHtml($ticket->assignee?->name ?? '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω');
//
//        return "üë§ <b>–¢–∏–∫–µ—Ç #{$ticket->id} –Ω–∞–∑–Ω–∞—á–µ–Ω</b>\n\n" .
//            "–ù–∞–∑–Ω–∞—á–∏–ª: {$initiatorName}\n" .
//            "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {$assigneeName}\n" .
//            "–ó–∞–≥–æ–ª–æ–≤–æ–∫: {$title}\n\n" .
//            "<a href=\"{$ticketUrl}\">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>";
//    }
//
//    private function formatClosedMessage(Ticket $ticket, ?User $initiator, string $ticketUrl): string
//    {
//        $title = $this->escapeHtml($ticket->title);
//        $initiatorName = $this->escapeHtml($initiator?->name ?? '–°–∏—Å—Ç–µ–º–∞');
//
//        return "‚úÖ <b>–¢–∏–∫–µ—Ç #{$ticket->id} –∑–∞–∫—Ä—ã—Ç</b>\n\n" .
//            "–ó–∞–∫—Ä—ã–ª: {$initiatorName}\n" .
//            "–ó–∞–≥–æ–ª–æ–≤–æ–∫: {$title}\n\n" .
//            "<a href=\"{$ticketUrl}\">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>";
//    }
//
//    private function formatDefaultMessage(Ticket $ticket, string $action, string $ticketUrl): string
//    {
//        $title = $this->escapeHtml($ticket->title);
//        $actionText = $this->escapeHtml($action);
//
//        return "üé´ <b>–î–µ–π—Å—Ç–≤–∏–µ —Å —Ç–∏–∫–µ—Ç–æ–º #{$ticket->id}</b>\n\n" .
//            "–î–µ–π—Å—Ç–≤–∏–µ: {$actionText}\n" .
//            "–ó–∞–≥–æ–ª–æ–≤–æ–∫: {$title}\n\n" .
//            "<a href=\"{$ticketUrl}\">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>";
//    }
}
