<?php

namespace App\Console\Commands;

use App\Enums\TicketStatusEnum;
use App\Models\Ticket;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\Laravel\Facades\Telegram;

class ReportOpenTickets extends Command
{
    protected $signature = 'tickets:report-open';
    protected $description = 'Report all open tickets grouped by performers';
    protected $maxMessageLength = 4096; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

    public function handle()
    {
        $openTickets = Ticket::where('status', TicketStatusEnum::OPENED)
            ->with('performer')
            ->get();

        if ($openTickets->isEmpty()) {
            $this->info('–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.');
            return;
        }

        $ticketsByPerformer = $openTickets->groupBy('performer.name');

        $messages = $this->prepareMessages($ticketsByPerformer);

        foreach ($messages as $message) {
            $this->sendTelegramNotification($message);
        }

        $this->info('–û—Ç—á–µ—Ç –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º —Ç–∏–∫–µ—Ç–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram.');
    }

    private function prepareMessages($ticketsByPerformer)
    {
        $messages = [];
        $currentMessage = "–•–≤–∞—Ç–∏—Ç –∂–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ ‚Äî –æ–Ω —É–∂–µ –Ω–∞—Å—Ç–∞–ª! –í–ø–µ—Ä—ë–¥ –∑–∞ —Ä–∞–±–æ—Ç—É, —Ç–æ–≤–∞—Ä–∏—â–∏! üöÄ\n\n ‚è≥ <b>–û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:</b>\n\n";

        // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç—ã –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        if ($ticketsByPerformer->has('')) {
            $unassignedTickets = $ticketsByPerformer['']->map(function($ticket) {
                return $this->formatTicketLink($ticket->id);
            })->implode(', ');
            $unassignedSection = "–ë–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è - {$unassignedTickets}\n\n";
            $currentMessage = $this->addToMessageOrCreateNew($currentMessage, $unassignedSection, $messages);
            $ticketsByPerformer->forget('');
        }

        // –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã
        foreach ($ticketsByPerformer as $performerName => $tickets) {
            $ticketLinks = $tickets->map(function($ticket) {
                return $this->formatTicketLink($ticket->id);
            })->implode(', ');

            $performerSection = "<b>{$performerName}</b> \n {$ticketLinks}\n\n";
            $currentMessage = $this->addToMessageOrCreateNew($currentMessage, $performerSection, $messages);
        }

        if (!empty($currentMessage)) {
            $messages[] = $currentMessage;
        }

        return $messages;
    }

    private function addToMessageOrCreateNew($currentMessage, $newSection, &$messages)
    {
        if (mb_strlen($currentMessage . $newSection) > $this->maxMessageLength) {
            $messages[] = $currentMessage;
            return $newSection;
        }
        return $currentMessage . $newSection;
    }

    private function formatTicketLink($ticketId)
    {
        $url = "https://tickets.metak.az/cabinet/tickets/{$ticketId}";
        return "<a href='{$url}'>#{$ticketId}</a>";
    }

    private function sendTelegramNotification($message)
    {
        try {
            Telegram::sendMessage([
                'chat_id' => config('services.telegram.chat_id'),
                'text' => $message,
                'parse_mode' => 'HTML',
            ]);
        } catch (\Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: ' . $e->getMessage());
        }
    }
}
